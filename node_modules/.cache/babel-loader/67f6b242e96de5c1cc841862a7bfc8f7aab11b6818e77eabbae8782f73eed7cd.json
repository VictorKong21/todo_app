{"ast":null,"code":"var _jsxFileName = \"/Users/victor/Desktop/Web Development/todo_app/src/components/Form.jsx\",\n  _s = $RefreshSig$();\n// TODO:\n// 1) Add \"Done\" and \"Remove\" buttons to each TODO item \n// 1.1) Update 'list' from array to object; each list item should have item name and status (is completed)\n// 1.2) Done -> Strikethrough, set status to 'is completed'\n// 1.3) Remove -> delete from string, remove item from object\n// 2) Use Tailwind to update visual\n\n// Done: \n// 1) Autofocus input field after submit\n// 2) Clear input field after submit\n// 3) Disable when empty item is added \n// 4) Add a count to number of TODOs\n\nimport React, { useState } from \"react\";\nimport ItemList from \"./ItemList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Form() {\n  _s();\n  const [list, setList] = useState([]);\n  const [input, setInput] = useState(\"\");\n  function handleInput(e) {\n    setInput(e.target.value);\n  }\n  function handleList(e) {\n    e.preventDefault(); //Prevent page auto refresh on click\n    input !== \"\" && setList(item => [...item, input]); //Prevent user from adding empty todo item\n    setInput(\"\"); // Clear input field after adding todo item\n  }\n\n  function handleItemCount() {\n    return list.length;\n  }\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      onChange: handleInput,\n      name: \"todo-input\",\n      placeholder: \"Add TODO here\",\n      value: input,\n      autoFocus: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleList,\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: list.map(todoItem => /*#__PURE__*/_jsxDEV(ItemList, {\n        text: todoItem\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 37\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [handleItemCount(), \" left to do\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 13\n  }, this);\n}\n_s(Form, \"WNNEIGaih2LgpCqcaFWp1Yqkoa4=\");\n_c = Form;\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useState","ItemList","Form","list","setList","input","setInput","handleInput","e","target","value","handleList","preventDefault","item","handleItemCount","length","map","todoItem"],"sources":["/Users/victor/Desktop/Web Development/todo_app/src/components/Form.jsx"],"sourcesContent":["// TODO:\n// 1) Add \"Done\" and \"Remove\" buttons to each TODO item \n// 1.1) Update 'list' from array to object; each list item should have item name and status (is completed)\n// 1.2) Done -> Strikethrough, set status to 'is completed'\n// 1.3) Remove -> delete from string, remove item from object\n// 2) Use Tailwind to update visual\n\n// Done: \n// 1) Autofocus input field after submit\n// 2) Clear input field after submit\n// 3) Disable when empty item is added \n// 4) Add a count to number of TODOs\n\nimport React, { useState } from \"react\";\nimport ItemList from \"./ItemList\";\n\n\nfunction Form() {\n\n    const [list, setList] = useState([]);\n    const [input, setInput] = useState(\"\");\n\n    function handleInput(e) {\n        setInput(e.target.value);\n    }\n\n    function handleList(e) {\n        e.preventDefault();  //Prevent page auto refresh on click\n        input !== \"\" && setList(item => [...item, input]) //Prevent user from adding empty todo item\n        setInput(\"\"); // Clear input field after adding todo item\n    }\n\n    function handleItemCount() {\n        return list.length;\n    }\n\n    return (<form>\n        <input onChange={handleInput} name=\"todo-input\" placeholder=\"Add TODO here\" value={input} autoFocus></input>\n        <button onClick={handleList}>Add Item</button>\n        <ul>{list.map((todoItem) => <ItemList text={todoItem} />)}</ul>\n        <p>{handleItemCount()} left to do</p>\n    </form>);\n\n}\n\nexport default Form;"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAGlC,SAASC,IAAI,GAAG;EAAA;EAEZ,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGJ,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EAEtC,SAASO,WAAW,CAACC,CAAC,EAAE;IACpBF,QAAQ,CAACE,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B;EAEA,SAASC,UAAU,CAACH,CAAC,EAAE;IACnBA,CAAC,CAACI,cAAc,EAAE,CAAC,CAAE;IACrBP,KAAK,KAAK,EAAE,IAAID,OAAO,CAACS,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAER,KAAK,CAAC,CAAC,EAAC;IAClDC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAClB;;EAEA,SAASQ,eAAe,GAAG;IACvB,OAAOX,IAAI,CAACY,MAAM;EACtB;EAEA,oBAAQ;IAAA,wBACJ;MAAO,QAAQ,EAAER,WAAY;MAAC,IAAI,EAAC,YAAY;MAAC,WAAW,EAAC,eAAe;MAAC,KAAK,EAAEF,KAAM;MAAC,SAAS;IAAA;MAAA;MAAA;MAAA;IAAA,QAAS,eAC5G;MAAQ,OAAO,EAAEM,UAAW;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAC9C;MAAA,UAAKR,IAAI,CAACa,GAAG,CAAEC,QAAQ,iBAAK,QAAC,QAAQ;QAAC,IAAI,EAAEA;MAAS;QAAA;QAAA;QAAA;MAAA,QAAG;IAAC;MAAA;MAAA;MAAA;IAAA,QAAM,eAC/D;MAAA,WAAIH,eAAe,EAAE;IAAA;MAAA;MAAA;MAAA;IAAA,QAAgB;EAAA;IAAA;IAAA;IAAA;EAAA,QAClC;AAEX;AAAC,GA1BQZ,IAAI;AAAA,KAAJA,IAAI;AA4Bb,eAAeA,IAAI;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}